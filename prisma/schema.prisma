// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id           String   @id @default(uuid())
  title        String
  description  String
  normal_price Float    @default(0)
  offer_price  Float    @default(0)
  slug         String   @unique
  tags         String[] @default([])
  gender       Gender
  hasVariables Boolean  @default(false)
  stock        Int      @default(0)

  ProductVariant ProductVariant[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
  @@index([categoryId])
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Attribute {
  id   String @id @default(uuid())
  name String

  ProductVariantAttribute ProductVariantAttribute[]
}

model ProductVariant {
  id        String @id @default(uuid())
  productId String
  stock     Int    @default(0)

  product Product @relation(fields: [productId], references: [id])

  ProductVariantAttribute ProductVariantAttribute[]
  OrderItem               OrderItem[]
}

model ProductVariantAttribute {
  variantId   String
  attributeId String
  value       String

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  attribute Attribute      @relation(fields: [attributeId], references: [id])

  @@unique([variantId, attributeId, value])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  address UserAddress[]
  Order   Order[]
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Orden
model Order {
  id           Int       @id @default(autoincrement())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id           String @id @default(uuid())
  title        String
  quantity     Int
  normal_price Float  @default(0)
  offer_price  Float  @default(0)

  // Relaciones
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId String

  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  userId     String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique
}
